class Solution {
public:
    // Function to find the minimum number of arrows needed to burst all balloons
    int findMinArrowShots(vector<vector<int>>& points) {
        int n = points.size();

        // Sort the intervals based on the start coordinate
        sort(begin(points), end(points));

        // Initialize variables to keep track of the previous interval and the count of arrows
        vector<int> prev = points[0];
        int count = 1;

        // Iterate through the sorted intervals
        for(int i = 1; i < n; i++) {
            int currStartPoint = points[i][0];
            int currEndPoint   = points[i][1];

            int prevStartPoint = prev[0];
            int prevEndPoint   = prev[1];

            // Check for overlap between current and previous intervals
            if(currStartPoint > prevEndPoint) { // No overlap
                count++;
                prev = points[i];
            } else {
                // Overlap
                // Update the previous interval to include the overlapping region
                prev[0] = max(prevStartPoint, currStartPoint);
                prev[1] = min(prevEndPoint, currEndPoint);
            }
        }

        // Return the minimum number of arrows needed
        return count;
    }
};
