#include <vector>
#include <string>
#include <unordered_map>
#include <unordered_set>

using namespace std;

class Solution {
public:
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> wordSet(wordDict.begin(), wordDict.end());
        unordered_map<int, vector<string>> memo;
        return backtrack(s, wordSet, 0, memo);
    }

private:
    vector<string> backtrack(const string& s, const unordered_set<string>& wordSet, int start, unordered_map<int, vector<string>>& memo) {
        if (memo.find(start) != memo.end()) {
            return memo[start];
        }
        
        if (start == s.length()) {
            return {""};
        }
        
        vector<string> results;
        for (int end = start + 1; end <= s.length(); ++end) {
            string word = s.substr(start, end - start);
            if (wordSet.find(word) != wordSet.end()) {
                vector<string> subList = backtrack(s, wordSet, end, memo);
                for (const string& sub : subList) {
                    results.push_back(word + (sub.empty() ? "" : " ") + sub);
                }
            }
        }
        
        memo[start] = results;
        return results;
    }
};

// Example usage:
// int main() {
//     Solution sol;
//     string s = "catsanddog";
//     vector<string> wordDict = {"cat", "cats", "and", "sand", "dog"};
//     vector<string> result = sol.wordBreak(s, wordDict);
//     for (const string& sentence : result) {
//         cout << sentence << endl;
//     }
//     return 0;
// }
