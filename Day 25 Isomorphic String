class Solution {
public:
    bool isIsomorphic(string s, string t) {
        if (s.size() != t.size()) // If the lengths are different, they cannot be isomorphic.
            return false;

        unordered_map<char, char> charMap; // Map from s to t.
        unordered_set<char> mappedChars; // Set to keep track of mapped characters in t.

        for (int i = 0; i < s.size(); ++i) {
            char sChar = s[i];
            char tChar = t[i];

            // If sChar is already mapped to a different tChar, they are not isomorphic.
            if (charMap.find(sChar) != charMap.end() && charMap[sChar] != tChar)
                return false;

            // If sChar is not mapped but tChar is already mapped to another character from s, they are not isomorphic.
            if (charMap.find(sChar) == charMap.end() && mappedChars.find(tChar) != mappedChars.end())
                return false;

            // Map sChar to tChar and mark tChar as mapped.
            charMap[sChar] = tChar;
            mappedChars.insert(tChar);
        }

        // If the loop completes, s and t are isomorphic.
        return true;
    }
};

