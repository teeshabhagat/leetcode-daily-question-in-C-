class Solution {
public:
    // Function to find the maximum depth of parentheses in a given string `s`.
    int maxDepth(string s) {
        int maxDepth = 0; // To store the maximum depth encountered
        int currentDepth = 0; // To track the current depth of open parentheses
      
        // Iterate through each character in the string
        for (char& c : s) {
            if (c == '(') {
                // Increment the current depth when an opening parenthesis is encountered
                currentDepth++;
                // Update the maximum depth encountered so far
                maxDepth = std::max(maxDepth, currentDepth);
            } else if (c == ')') {
                // Decrement the current depth when a closing parenthesis is encountered
                currentDepth--;
            }
            // No action on other characters
        }
        // Return the maximum depth of opened parentheses
        return maxDepth;
    }
};
