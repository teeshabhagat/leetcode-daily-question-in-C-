class Solution {
public:
    int minimumPushes(string word) {
        int n = word.size();
        unordered_map<char, int> frequencyMap;
        for (char c : word) {
            frequencyMap[c]++;
        }

        // Create a vector of pairs to store characters and their frequencies
        vector<pair<char, int>> frequencyVector;

        // Fill the vector with pairs from the unordered_map
        for (const auto& entry : frequencyMap) {
            frequencyVector.push_back(entry);
        }

        // Sort the vector based on frequencies in decreasing order
        sort(frequencyVector.begin(), frequencyVector.end(), 
             [](const pair<char, int>& a, const pair<char, int>& b) {
                 return a.second > b.second;
        });
        int ans = 0;
        int i = 1;

        //Move through all the sorted freq array 
        for(int j=0;j<frequencyVector.size();j++){
            // if j>7 and j%8==0 means multiple of 8, i increases
            if(j>7 && j%8==0){
                i++;
            }

            ans += i * frequencyVector[j].second;
        }

        return ans;

        
    }
};
